// PianoView.cpp

#include "PianoView.h"

#include <Debug.h>
#include <TextControl.h>

#include "stdio.h"
// ---------------------------------------------------------------- //
#include "Xed_Utils.h"
#include "Pattern.h"
#include "ScrollBar.h"
#include "Note.h"
#include "GfxMsg.h"

class PianoControl :
	public	BView {
	typedef	BView  _inherited;
	
public:
		BBitmap*				piano;
		Pattern*				curPattern;

	PianoControl(
		BRect								frame,
		const char*							name,
		Pattern*	p,
		BMessage*							message,
		uint32								resizingMode=B_FOLLOW_LEFT|B_FOLLOW_TOP,
		uint32								flags=B_WILL_DRAW|B_NAVIGABLE) :
		BView(frame,  name,   resizingMode, flags) {
	
		curPattern=p;
		SetEventMask(B_POINTER_EVENTS|B_KEYBOARD_EVENTS);
		piano=::MakeBitmapSkin("piano5");	
	}
	
public:
	virtual void AllAttached() {
				
		// size parent to fit me
		/*Window()->ResizeTo(
			Bounds().Width(),
			Bounds().Height());*/

		Window()->Show();
	}
	
	virtual void Draw(BRect r)
	{
	//	for(int i=0;i<16;i++)
//		{
//			DrawBitmap(piano,BPoint(i*23,0));
//		}
		if(curPattern==NULL) return;
	
	//BRect rect;
	
	int	ax1=(int)floor(r.left/(23));
	int	ax2=(int)ceil(r.right/(23));
	
	if(ax2>curPattern->getNumberNotes()) ax2=curPattern->getNumberNotes();
	
	
	
	for(int h=ax1;h<ax2;h++)
	{
	
	 DrawBitmap(piano,BPoint(h*23,0));
	 
	 //nota:
	 int n=curPattern->getNoteAt(h)->getNote();
	 SetHighColor(255,0,0);
	 
	 printf("n: %d\n",n);
	
	if (n==1 || n==3 || n==6 || n==8 || n==10) // Note #
		 FillRect(BRect(h*23+1,     60-(n*5+4)    ,  h*23+10,  60-(n*5)-2 ));
	else
		 FillRect(BRect(h*23+12,     60-(n*5+4)    ,  h*23+21,  60-(n*5)-2 ));
	 //slide:
	 if(  curPattern->getNoteAt(h)->getOct() & 8)
	 
	 	 	SetHighColor(255,0,0);
	 	else	
	 		SetHighColor(0,0,0);
	
		
	// FillRect(BRect(h*23,61,h*23+23,65));
	FillTriangle(BPoint(h*23,65),BPoint(h*23+23,61),BPoint(h*23+23,65));	
	
	}
}
	virtual void MouseDown(
		BPoint										point) {
		
		if(!Bounds().Contains(point))	return;
			
		
		
	if(curPattern==NULL) return;
	int	ax1=(int)floor(point.x/(23));
	int	ax2=(int)floor(point.y/5.);
	
	if(ax1>= curPattern->getNumberNotes() ) ax1=curPattern->getNumberNotes()-1;
	if(ax1<0) ax1=0;
	if(ax2>11) {
			 curPattern->getNoteAt(ax1)->setOct(curPattern->getNoteAt(ax1)->getOct()^8);
			 Invalidate(BRect(ax1*23,0,ax1*23+22,65));
			return;
			}
			
		curPattern->getNoteAt(ax1)->setNote(11-ax2);
		Invalidate(BRect(ax1*23,0,ax1*23+22,60));
		Window()->PostMessage(new BMessage(GENERIC));
	}
	
	virtual void KeyDown(
		const char*								bytes,
		int32											numBytes) {
		
		if(numBytes == 1 && *bytes == B_ESCAPE) {
			BWindow* w = Window(); // +++++ maui/2 workaround
			BMessenger(w).SendMessage(B_QUIT_REQUESTED);
			return;
		}
	}
};

// ---------------------------------------------------------------- //

// ---------------------------------------------------------------- //
// dtor/ctors
// ---------------------------------------------------------------- //

PianoView::~PianoView() {
	if(m_cancelMessage)
		delete m_cancelMessage;
}

PianoView::PianoView(
	BRect											frame,
	Pattern*					pat,
	const BMessenger&					target,
	BMessage*									message,
	BMessage*									cancelMessage) :
	BWindow(
		frame, //.InsetBySelf(-3.0,-3.0), // expand frame to counteract control border
		"PianoView",
		B_NO_BORDER_WINDOW_LOOK,
		B_FLOATING_APP_WINDOW_FEEL,
		0),
		
		// inizia qui!
	m_target(target),
	m_message(message),
	m_cancelMessage(cancelMessage),
	m_sentUpdate(false) {

	
	BScrollBar *sb=new BScrollBar(BRect(0,0,13,Bounds().Height()),"oct",NULL,1,3,B_VERTICAL);
	
	BRect r(Bounds());
	
	r.left +=14;
	
	m_control = new PianoControl(
		r,
		"textControl",
		pat,
		message,
		B_FOLLOW_ALL_SIDES);

	Run();
	Lock();
	
	//m_control->TextView()->SetFontAndColor(font);
	//m_control->TextView()->SetAlignment(align);
	//m_control->SetDivider(0.0);

	//m_control->SetViewColor(B_TRANSPARENT_COLOR);
	m_control->SetViewColor(0,0,0);
	//m_control->TextView()->SelectAll();
	
	AddChild(m_control);
	AddChild(sb);
	m_control->MakeFocus();
	printf("Welcome!\n");
	Unlock();
}

// ---------------------------------------------------------------- //
// BWindow
// ---------------------------------------------------------------- //

void PianoView::WindowActivated(
	bool											activated) {

	if(!activated)
		// +++++ will the message get sent first?
		Quit(); 
				
		
}

// ---------------------------------------------------------------- //
// BHandler
// ---------------------------------------------------------------- //

void PianoView::MessageReceived(
	BMessage*									message) {
	
	if(message->what == m_message->what) {
		// done; relay message to final target
		//message->AddString("_value", m_control->TextView()->Text());
		m_target.SendMessage(message);
		m_sentUpdate = true;
		printf("Quit?2 \n");
		Quit();
		
		return;
	}
	
	switch(message->what) {
		default:
			_inherited::MessageReceived(message);
	}
	
}		

bool PianoView::QuitRequested() {
	/*if(!m_sentUpdate && m_cancelMessage)
		m_target.SendMessage(m_cancelMessage);
	*/	
	printf("Quit?3 \n");
	return true;
}

// END -- PianoView.cpp --